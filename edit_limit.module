<?php

/**
 * @file edit_limit.module
 * Primary module file for Edit Limit. This contains all the hooks needed to
 * run the module.
 */

use Drupal\Component\Utility\Xss;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;

define('EDIT_LIMIT_NODE_COUNT_DEFAULT', 3);
define('EDIT_LIMIT_COMMENT_COUNT', 3);
define('EDIT_LIMIT_NODE_TIME_DEFAULT', 86400); // in seconds, 1 day
define('EDIT_LIMIT_COMMENT_TIME', 300); // in seconds, 5 minutes
define('EDIT_LIMIT_TIME_UNITS', '@seconds,@minutes,@hours,@days');
define('EDIT_LIMIT_TIME_UNIT_DEFAULT', 'seconds');

/**
 * Implements hook_menu_alter().
 *
 * This allows additional checks to be made for granting access checks. For instance,
 * the node menu items use node_access() to grant permissions to edit nodes, but we
 * want to not only check that, but also check to see if the user is allowed to continue
 * making edits.
 */
function edit_limit_menu_alter(&$items) {
  // node_access() overrides
  $items['node/%node/edit']['access callback'] = 'edit_limit_node_access';

  // Override comment edit access checks
  $items['comment/%comment/edit']['access callback'] = 'edit_limit_comment_access';
}

/**
 * Implements hook_node_access().
 */
function edit_limit_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($op == 'update') {

    if ($account->hasPermission('bypass edit limits')) {
      return AccessResult::allowed();
    }

    return _edit_limit_user_acccess($node);

  }

  return AccessResult::neutral();
}

/**
 * Helper function to perform additional access checks after node_access() has
 * been checked.
 */
function _edit_limit_user_acccess(NodeInterface $node) {
  // Be liberal here. The user has already passed node_access() by this point.
  $return = AccessResult::neutral();

  // If this is a new node, let it go.
  if ($node->isNew()) {
    return $return;
  }

  $config = \Drupal::config('edit_limit.settings');

  // Only limit edits if the content type is in the list.
  $allowed_types = $config->get('node_types');
  if (empty($allowed_types[$node->bundle()])) {
    return $return;
  }

  // Get the time limit settings
  $edit_limit_node_time_enabled = $config->get('node_time_enabled');
  $time_limits['default'] = intval($config->get('node_time_default')) * 24 * 60 * 60;
  $time_limits['node'][$node->bundle()] = $time_limits['default'];

  // Get the edit count limit settings.
  $edit_limit_node_count_enabled = $config->get('node_count_enabled');
  $count_limits['default'] = intval($config->get('node_count_default'));
  $count_limits['node'][$node->bundle()] = $count_limits['default'];

  // If no options are enabled, we're done.
  if (!$edit_limit_node_time_enabled && !$edit_limit_node_count_enabled) {
    return $return;
  }

  // Test that the node hasn't been edited more than the allowed number of times.
  $count_limit_reached = FALSE;
  if ($edit_limit_node_count_enabled && $return) {
    $edit_count = edit_limit_node_count($node->id());

    $count_limit = ($count_limits['node'][$node->bundle()]) ? $count_limits['node'][$node->bundle()] : $count_limits['node']['default'];
    if ($count_limit <= $edit_count) {
      $return = FALSE;
      $count_limit_reached = TRUE;
    }
  }

  // Test that the node was not created longer ago than the allowed time limit.
  if ($edit_limit_node_time_enabled && $return) {
    $time_unit = $config->get('node_time_unit');
    $timeleft = intval($node->getCreatedTime()) + intval(_unit_to_seconds($config->get('node_time_default'), $time_unit)) - REQUEST_TIME;

    //drupal_add_js(drupal_get_path('module', 'edit_limit') . '/edit_limit.js');
    if ($timeleft <= 0) {
      $return = AccessResult::forbidden();
    }
    elseif (!$count_limit_reached && \Drupal::routeMatch()->getRouteName() == 'entity.node.edit_form') {
      static $type;
      if (empty($type)) {
        $type = 'status';
        $message = '<span class="edit-limit-time-unit-' . $time_unit . '">' . t('You have %seconds %time_unit left to edit this content.', array('%seconds' => $timeleft, '%time_unit' => t('seconds'))) . '</span>';
        drupal_set_message($message, $type);
      }
    }
  }

  return $return;
}

/**
 * Helper function to convert a time unit to seconds
 *
 * @param int $time
 * @param string $unit
 *
 * @return int
 */
function _unit_to_seconds($time = 0, $unit = 'seconds') {
  switch ($unit) {
    case 'minutes':
      $time_in_seconds = $time * 60;
      break;
    case 'hours':
      $time_in_seconds = $time * 60 * 60;
      break;
    case 'days':
      $time_in_seconds = $time * 60 * 60 * 24;
      break;
    default:
      $time_in_seconds = $time;
      break;
  }
  return $time_in_seconds;
}

/**
 * Access check function to see if the user can still edit the comment or not.
 * It must, at minimum, perform the comment module's access checks first.
 */
function edit_limit_comment_access($edit = NULL, $comment = NULL) {
  return;
  if (user_access('post comments')) {
    if (user_access('bypass edit limits')) {
      return TRUE;
    }
    $return = comment_access($edit, $comment);

    // Only limit edits if content type is in the list.
    $node = node_load($comment->nid);
    if (!in_array($node->type, variable_get('edit_limit_comments', array()))) {
      return $return;
    }
    if (variable_get('edit_limit_comment_time_enabled', FALSE)) {
      $time_unit = variable_get('edit_limit_comment_time_unit', EDIT_LIMIT_TIME_UNIT_DEFAULT);
      // By this point, we want to return false if the time has passed.
      if ($comment->created + intval(_unit_to_seconds(variable_get('edit_limit_comment_time', EDIT_LIMIT_COMMENT_TIME), $time_unit)) < REQUEST_TIME) {
        $return = FALSE;
      }
      else {
        static $time_left;
        if (empty($time_left)) {
          drupal_add_js(drupal_get_path('module', 'edit_limit') . '/edit_limit.js');
          $time_left = $comment->created + intval(_unit_to_seconds(variable_get('edit_limit_comment_time', EDIT_LIMIT_COMMENT_TIME), $time_unit)) - REQUEST_TIME;
        }
        if (user_access('edit own comments')) {
          $type = 'status';
          $message = '<span class="edit-limit-time-unit-' . check_plain($time_unit) . '">' . t('You have %time_left %time_unit left to edit this comment.', array('%time_left' => $time_left, '%time_unit' => 'seconds')) . '</span>';
          drupal_set_message(filter_xss($message, array('em', 'span')), $type, FALSE);
        }
      }
    }
    return $return;
  }
  return FALSE;
}


/**
 * Implements hook_node_update().
 */
function edit_limit_node_update(NodeInterface $node) {
  if (\Drupal::config('edit_limit.settings')->get('node_count_enabled')) {
    // Update the count of edit limits.
    $count_data = db_select('edit_limit_node_count', 'e')
      ->fields('e')
      ->condition('nid', $node->id(), '=')
      ->execute()
      ->fetchAssoc();

    $edit_count = 0;
    if (!empty($count_data)) {
      $edit_count = $count_data['count'];
    }
    $edit_count++;
    db_merge('edit_limit_node_counts')
      ->key('nid', $node->id())
      ->fields(['nid', 'count'], [$node->id(), $edit_count])
      ->execute();
  }
}

/**
 * Implements hook_node_prepare().
 */
function edit_limit_node_prepare($node) {
  if (!empty($node->nid)) {
    if (\Drupal::config('edit_limit')->get('node_count_enabled')) {
      $limit = \Drupal::config('edit_limit')->get('node_count_default');
      $count = edit_limit_node_count($node->nid);

      // If the edit count is getting close to the limit, make this a warning instead of a simple status
      $type = ($count + 2 > $limit) ? 'warning' : 'status';
      $message = t("This node has been edit @count out of @limit times, after which it will be locked.", array('@count' => $count, '@limit' => $limit));
      drupal_set_message(filter_xss($message), $type);
    }
  }
}

/**
 * Helper function to get the number of times a particular node
 * has been edited.
 *
 * @param int $nid
 *   The node nid
 *
 * @return int $count
 */
function edit_limit_node_count($nid) {
  $count = db_select('edit_limit_node_count', 'e')
    ->fields('e', array('count'))
    ->condition('nid', $nid, '=')
    ->execute()
    ->fetchField();
  $count = (empty($count)) ? 0 : $count;
  return $count;
}

/**
 * Implements hook_link_alter().
 * This removes comment edit links if the comment is no longer editable.
 */
//function edit_limit_link_alter(&$links, $node, $comment = NULL) {
function edit_limit_node_view_alter(&$build) {
  return;
  // Don't bother if the user can't edit their own comments anyway
  if (!user_access('edit own comments')) return FALSE;

  if (!empty($build['links']['comment']['#links']['comment-add']) && !empty($build['comments']['comments'])) {
    // Allow edit links if the edit count hasn't been reached yet.
    // TODO: Complete this functionality.
    if (0) {
      $results = db_query("SELECT * FROM {edit_limit_comment_time} WHERE cid = :cid", array(':cid' => $comment->cid));
    }

    // Allow edit links if there is enough time left based on the system variable edit_limit_comment_time.
    foreach ($build['comments']['comments'] as $key => $comment) {
      if (!is_numeric($key)) continue;

      // We don't have to do much user access checking, since this link will only exist if the user passed
      // the comment_access() check for this given comment.
      if (!user_access('bypass edit limits') && variable_get('edit_limit_comment_time_enabled', FALSE) && !empty($build['comments']['comments'][$key]['links']['comment']['#links']['comment-edit'])) {
        $time_unit = variable_get('edit_limit_comment_time_unit', EDIT_LIMIT_TIME_UNIT_DEFAULT);
        $time_limit = $comment['#comment']->created + intval(_unit_to_seconds(variable_get('edit_limit_comment_time', EDIT_LIMIT_COMMENT_TIME), $time_unit));

        // If too much time has passed, destroy the link.
        if ($time_limit < REQUEST_TIME) {
          unset($build['comments']['comments'][$key]['links']['comment']['#links']['comment-edit']);
        }
        else {
          // Add the javascript that will handle the countdown.
          drupal_add_js(drupal_get_path('module', 'edit_limit') . '/edit_limit.js');

          // Modify the link to add the remaining seconds (only users that can't pass 'bypass edit limits' get this far).
          $build['comments']['comments'][$key]['links']['comment']['#links']['comment-edit']['title'] .= ' <span class="edit-limit-time-unit-' . $time_unit . '">' . t('(%time_limit %time_unit left)', array('%time_limit' => ($time_limit - REQUEST_TIME), '%time_unit' => 'seconds')) . '</span>';
        }
      }
    }
  }
}
